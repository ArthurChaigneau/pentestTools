import argparse
import getpass
import paramiko
import os
import socket
import textwrap
import threading
import shlex
import subprocess
import sys

class SshClient:
    def __init__(self, args):
        self.user = input('Enter User: ')
        self.password = getpass.getpass()
        self.ip = args.target
        self.port = args.port

    def run(self):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self.ip, port=self.port, username=self.user, password=self.password)
        ssh_session = client.get_transport().open_session()

        if ssh_session.active:
            print("ok")
            while True:
                command = input("Arthur> ")
                command += '\n'
                try:
                    if 'exit' in command:
                        client.close()
                        break
                    else:
                        ssh_session.send(command.encode())

                        recv_len = 1
                        response = ''
                        while recv_len:
                            data = ssh_session.recv(4096)
                            recv_len = len(data)
                            response += data.decode()
                            if recv_len < 4096:
                                break
                        print(response)
                except Exception as e:
                    ssh_session.send(str(e))

            client.close()

def ssh_command(ip, port, user, passwd, command):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(ip, port=port, username=user, password=passwd)

    ssh_session = client.get_transport().open_session()
    if ssh_session.active:
        ssh_session.send(command)
        print(ssh_session.recv(1024).decode())
        while True:
            command = input("> ")
            command += '\n'
            try:
                if 'exit' in command:
                    client.close()
                    break
                ssh_session.send(command.encode())
            except Exception as e:
                ssh_session.send(str(e))
        client.close()
    return

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='My ssh client',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent('''Example:
                                         ssh_client.py -t 192.168.1.2 -p 9999 # accède au serveur ssh_server à 
                                         l'adresse 192.168.1.2 sur le port 9999
                                         '''))
    parser.add_argument('-p', '--port', type=int, default=9999, help='specified port')
    parser.add_argument('-t', '--target', default='127.0.0.1', help='specified IP')
    args = parser.parse_args()

    ssh = SshClient(args)
    ssh.run()



    