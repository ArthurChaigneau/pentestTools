import argparse
import contextlib
import os
import queue
import requests
import sys
import textwrap
import threading
import time
'''
    Map un site web en se basant sur un dictionnaire, ce dernier peut être crée via ce script.
    L'utilisation est la suivante on télécharge une archive du framework qu'on veut tester on utilise
    ce script pour générer le dictionnaire en se basant sur l'archive. Puis on lance le scan sur
    le site web en donnant le chemin du dictionnaire crée.
'''
FILTERED = [".jpg", ".gif", ".png", ".css"]
answers = queue.Queue()

def create_dictionnary(dictPath, file):
    with open(file, "w") as f:
       with chdir(dictPath):
        for root, _, files in os.walk('.'):
            for fname in files:
                if os.path.splitext(fname)[1] in FILTERED:
                    continue
                path = os.path.join(root, fname)
                if path.startswith('.'):
                    path = path[1:]
                f.write(path+'\n')


def map_remote(target, file, sleepTime):
    web_paths = queue.Queue()

    with open(file, "r") as f:
        for line in f.read():
            web_paths.put(line)

    while not web_paths.empty():
        path = web_paths.get()
        url = f'{target}{path}'
        time.sleep(sleepTime)
        r = requests.get(url)
        if r.status_code == 200:
            answers.put(url)
            sys.stdout.write('+')
        else:
            sys.stdout.write('x')
        sys.stdout.flush()

def run(target, file, sleepTime=2, threads=10):
    mythreads = list()
    for i in range(int(threads)):
        print(f'Spawning thread {i}')
        t = threading.Thread(target=map_remote, args=(target, file, int(sleepTime)))
        mythreads.append(t)
        t.start()

    for thread in mythreads:
        thread.join()


@contextlib.contextmanager
def chdir(path):
    """
    On change de répertoire puis en sortie on revient au répertoire parent
    :param path: le chemin vers le répertoire
    """
    this_dir = os.getcwd()
    os.chdir(path)
    try:
        yield
    finally:
        os.chdir(this_dir)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='A framework mapper for discovery',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent('''Example:
                                     frameworkmapper.py -d frameworkdirectory -f mydict.txt #Create a dictionary from a framework
                                     frameworkmapper.py -u targeturl -f mydict.txt #map a webserver with a dictionary
                                     frameworkmapper.py -u targeturl -f mydict.txt -t 10 -s 5 #map with 10 threads and a sleep time of 5 s beetween requests
                                     '''))
    parser.add_argument('-d', '--directory', help='framework directory')
    parser.add_argument('-f', '--file',  help='dictionary file')
    parser.add_argument('-u', '--target', help='url adress')
    parser.add_argument('-t', '--thread',  help='number of threads')
    parser.add_argument('-s', '--sleep', help='sleep beetween request')
    args = parser.parse_args()
    print(args)
    if args.directory:
        create_dictionnary(args.directory, args.file)
        print('done')
    elif args.target:
        thread = args.thread if args.thread else 10
        sleep = args.sleep if args.sleep else 0

        run(args.target, args.file, threads=thread, sleepTime=sleep)
        while not answers.empty():
            print(f'{answers.get()}')
        print('done')
    else:
        print("args missings, see -h for more informations")
        exit(-1);

